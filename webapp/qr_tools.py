import qrcode
import cv2 as cv

info = input("info yes? :")

def create(name):
    qr = qrcode.QRCode(
        version=1,
        error_correction=qrcode.constants.ERROR_CORRECT_M,
        box_size=10,
        border=4,
    )

    qr.add_data(name)
    qr.make(fit=True)
    img = qr.make_image(fill_color="black", back_color="white").convert('RGB')
    return img

def save_qr_file(img,file_name):
    img.save(file_name)

def read_qr(path):
    # This file reads the QR code generated by qr_code_generator.py and prints out the data in the terminal

    img = cv.imread(path, 0) # image is now loaded in OpenCV; 0 is a flag - image will be loaded in black and white
    detection = cv.QRCodeDetector()

    #    detect — Detects QR code in image and returns the quadrangle containing the code.
    #    decode — Decodes QR code in the image once it’s found by the detect() method.
    #       Returns UTF8-encoded output string or an empty string if the code cannot be decoded.
    #    detectAndDecode — Both detect and decode QR code.

    retval, points, straight_qrcode = detection.detectAndDecode(img)
    # print('INFO: ', retval, "\n" "\n" 'POINTS: ', points, "\n" 'QR CODE MATRIX: ' "\n" ,straight_qrcode)
    print('INFO: ', retval, '\n ', 'LENGTH ', len(retval))

    #   retval — Result in a string.
    #   points — Array of vertices of the found QR code quadrangle. Will be empty if not found.
    #   straight_qrcode — An image containing rectified and binarized QR code.

    cv.imshow('image',img)
    cv.waitKey(0)

qr = create(info)
save_qr_file(qr,"xd.png")
read_qr("xd.png")
